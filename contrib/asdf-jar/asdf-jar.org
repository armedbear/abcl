#+TITLE: clearing the bitrot out of ASDF-JAR

* @selwynsimsek GitHub issue
<https://github.com/armedbear/abcl/issues/476>

* General refactoring

add separate package file source unit, a test or two

* TODO configure ASDF to find a contrib on the filesystem

<[[info:asdf.info#Configuration DSL][asdf.info#Configuration DSL]]>
#+begin_src lisp
  (asdf:initialize-source-registry
   '(:source-registry :ignore-inherited-configuration
     (:directory #p"~/work/abcl/contrib/jss/")))
#+end_src

#+RESULTS:

#+begin_src lisp
    (asdf:locate-system :jss)
#+end_src

#+begin_src lisp
  (mapcar
   (lambda (p) (when (not (pathname-jar-p p)) p))
   asdf:*central-registry*)
#+end_src


#+caption: save central registry
#+begin_src lisp
  (setf xx asdf:*central-registry*)
#+end_src

#+begin_src lisp
  (defun collect-abcl-contrib-directories ()
    (let* ((all-asd
             (directory
              (asdf:system-relative-pathname :abcl "contrib/**/*.asd")))
           (unique-directories
             (loop :for asd :in all-asd
                   :with result = nil 
                   :doing
                      (pushnew (make-pathname :directory (pathname-directory asd))
                               result :test #'equal)
                   :finally
                      (return result))))
      (values
       unique-directories
       all-asd)))

#+end_src

#+RESULTS:
: COLLECT-ABCL-CONTRIB-DIRECTORIES

#+begin_src lisp
  (let* ((not-jars 
           (mapcar
            (lambda (p) (when (not (pathname-jar-p p)) p))
            asdf:*central-registry*))
         (directories
           (remove-if #'not not-jars))
         (configuration-old
           ,@(loop :for d :in directories
                   :collecting `(:directory ,d))
           ,@(loop :for d :in (collect-abcl-contrib-directories)
                   :collecting `(:directory ,d))

    (asdf:initialize-source-registry
     `(:source-registry
       :inherit-configuration
       ,#+nil
       :ignore-inherited-configuration)))
#+end_src

#+RESULTS:

#+begin_src lisp
  (defun fib (n)
    (when (= n 1)
      2))
#+end_src

#+RESULTS:
: FIB

#+begin_src lisp

#+end_src
